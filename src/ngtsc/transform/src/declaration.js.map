{"version":3,"file":"declaration.js","sourceRoot":"","sources":["../../../../../../../packages/compiler-cli/src/ngtsc/transform/src/declaration.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;AAEH,iCAAiC;AAGjC,6CAA0D;AAI1D;;GAEG;AACH;IAAA;QACU,cAAS,GAAG,IAAI,GAAG,EAAqC,CAAC;QACzD,YAAO,GAAG,IAAI,0BAAa,EAAE,CAAC;IAmCxC,CAAC;IAjCC;;OAEG;IACH,iBAAiB,CAAC,IAAY,EAAE,IAA+B;QAC7D,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACjC,CAAC;IAED;;OAEG;IACH,SAAS,CAAC,GAAW;QACnB,MAAM,OAAO,GACT,EAAE,CAAC,gBAAgB,CAAC,UAAU,EAAE,GAAG,EAAE,EAAE,CAAC,YAAY,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;QAE1F,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;YACxD,MAAM,IAAI,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACnC,EAAE,CAAC,CAAC,EAAE,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS;gBACtD,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACvC,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAG,CAAC;gBAClD,MAAM,MAAM,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;gBAC9C,MAAM,KAAK,GAAG,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;gBAC1C,MAAM,IAAI,GAAG,0BAAa,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;gBACpD,GAAG,GAAG,MAAM,GAAG,cAAc,IAAI,CAAC,KAAK,KAAK,IAAI,KAAK,GAAG,KAAK,CAAC;YAChE,CAAC;QACH,CAAC;QAED,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC;QAC7C,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YACzB,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,eAAe,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,IAAI,MAAM,CAAC,CAAC,IAAI,EAAE,GAAG,GAAG,CAAC;QACjF,CAAC;QAED,MAAM,CAAC,GAAG,CAAC;IACb,CAAC;CACF;AArCD,gDAqCC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as ts from 'typescript';\n\nimport {AddStaticFieldInstruction} from './api';\nimport {ImportManager, translateType} from './translator';\n\n\n\n/**\n * Processes .d.ts file text and adds static field declarations, with types.\n */\nexport class DtsFileTransformer {\n  private ivyFields = new Map<string, AddStaticFieldInstruction>();\n  private imports = new ImportManager();\n\n  /**\n   * Track that a static field was added to the code for a class.\n   */\n  recordStaticField(name: string, decl: AddStaticFieldInstruction): void {\n    this.ivyFields.set(name, decl);\n  }\n\n  /**\n   * Process the .d.ts text for a file and add any declarations which were recorded.\n   */\n  transform(dts: string): string {\n    const dtsFile =\n        ts.createSourceFile('out.d.ts', dts, ts.ScriptTarget.Latest, false, ts.ScriptKind.TS);\n\n    for (let i = dtsFile.statements.length - 1; i >= 0; i--) {\n      const stmt = dtsFile.statements[i];\n      if (ts.isClassDeclaration(stmt) && stmt.name !== undefined &&\n          this.ivyFields.has(stmt.name.text)) {\n        const desc = this.ivyFields.get(stmt.name.text) !;\n        const before = dts.substring(0, stmt.end - 1);\n        const after = dts.substring(stmt.end - 1);\n        const type = translateType(desc.type, this.imports);\n        dts = before + `    static ${desc.field}: ${type};\\n` + after;\n      }\n    }\n\n    const imports = this.imports.getAllImports();\n    if (imports.length !== 0) {\n      dts = imports.map(i => `import * as ${i.as} from '${i.name}';\\n`).join() + dts;\n    }\n\n    return dts;\n  }\n}"]}