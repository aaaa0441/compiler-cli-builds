{"version":3,"file":"api.js","sourceRoot":"","sources":["../../../../../../../packages/compiler-cli/src/ngtsc/transform/src/api.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Expression, Type} from '@angular/compiler';\nimport * as ts from 'typescript';\n\nimport {Decorator} from '../../metadata';\n\n/**\n * Provides the interface between a decorator compiler from @angular/compiler and the Typescript\n * compiler/transform.\n *\n * The decorator compilers in @angular/compiler do not depend on Typescript. The adapter is\n * responsible for extracting the information required to perform compilation from the decorators\n * and Typescript source, invoking the decorator compiler, and returning the result.\n */\nexport interface CompilerAdapter<A> {\n  /**\n   * Scan a set of reflected decorators and determine if this adapter is responsible for compilation\n   * of one of them.\n   */\n  detect(decorator: Decorator[]): Decorator|undefined;\n\n  /**\n   * Perform analysis on the decorator/class combination, producing instructions for compilation\n   * if successful, or an array of diagnostic messages if the analysis fails or the decorator\n   * isn't valid.\n   */\n  analyze(node: ts.ClassDeclaration, decorator: Decorator): AnalysisOutput<A>;\n\n  /**\n   * Generate a description of the field which should be added to the class, including any\n   * initialization code to be generated.\n   */\n  compile(node: ts.ClassDeclaration, analysis: A): AddStaticFieldInstruction;\n}\n\n/**\n * The output of an analysis operation, consisting of possibly an arbitrary analysis object (used as\n * the input to code generation) and potentially diagnostics if there were errors uncovered during\n * analysis.\n */\nexport interface AnalysisOutput<A> {\n  analysis?: A;\n  diagnostics?: ts.Diagnostic[];\n}\n\n/**\n * A description of the static field to add to a class, including an initialization expression\n * and a type for the .d.ts file.\n */\nexport interface AddStaticFieldInstruction {\n  field: string;\n  initializer: Expression;\n  type: Type;\n}\n"]}